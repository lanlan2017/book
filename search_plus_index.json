{"./":{"url":"./","title":"简介","keywords":"","body":"简介 本书收录了一些常用的代码,以便日后查用. "},"java/":{"url":"java/","title":"Java","keywords":"","body":"java 这里收集一些常用的java代码,以便日后查用. "},"java/algorithm/":{"url":"java/algorithm/","title":"算法","keywords":"","body":"算法 这里收录一些常用的java算法,以便日后查用. "},"java/algorithm/sort/":{"url":"java/algorithm/sort/","title":"排序","keywords":"","body":"排序算法 这里收录一些常见的java排序算法,以便日后查用. "},"java/algorithm/sort/BubbleSort.html":{"url":"java/algorithm/sort/BubbleSort.html","title":"冒泡排序","keywords":"","body":"1.1 冒泡排序 关键代码 private void bubbleSort(int[] array) { int temp; // 每次讲一个最大的元素移动到最后 for (int i = 0; i array[j + 1]) { temp = array[j]; array[j] = array[j + 1]; array[j + 1] = temp; } } } } "},"java/algorithm/sort/InsertSort.html":{"url":"java/algorithm/sort/InsertSort.html","title":"插入排序","keywords":"","body":"1.2 插入排序 关键代码 private void insertSort(int[] array) { // 缓存,用于保存需要插入的元素 int toInsert; for (int i = 1; i = 0 && array[j] > toInsert) { // 将比要插入的元素大的元素全部向后移动一格 array[j + 1] = array[j]; // 比较下一个格 j--; } array[j + 1] = toInsert; } } "},"java/algorithm/sort/QuickSort.html":{"url":"java/algorithm/sort/QuickSort.html","title":"快速排序","keywords":"","body":"1.2 快速排序 关键代码 private void quickSort(int[] array) { quickSort(array, 0, array.length - 1); } private void quickSort(int[] array, int left, int right) { if (left i) { // 如果在右边找到比分割点小的数,结束查找 if (array[j] splitPoint) { break; } i++; } if (j > i) { swap(array, i, j); printSwap(array, i, j, left, right);; } } swap(array, left, i); printSwap(array, left, i, left, right); return i; } private void swap(int[] array, int i, int j) { int temp = array[i]; array[i] = array[j]; array[j] = temp; } "},"java/algorithm/sort/SelectSort.html":{"url":"java/algorithm/sort/SelectSort.html","title":"选择排序","keywords":"","body":"1.2 选择排序 关键代码 private void selectSort(int[] array) { // 选择排序法 for (int i = 0; i array[maxIndex]) { maxIndex = j; } } // 将最大的数换到后面 // 缓存最后的数 int temp = array[array.length - 1 - i]; // 将大的数换到最后 array[array.length - 1 - i] = array[maxIndex]; // 将最后的数换到 array[maxIndex] = temp; } } "},"git/":{"url":"git/","title":"Git","keywords":"","body":"Git "},"git/remote/":{"url":"git/remote/","title":"远程仓库","keywords":"","body":"远程仓库 Git是目前最流行的版本管理系统，学会Git几乎成了开发者的必备技能。 Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。 git clone git remote git fetch git pull git push 参考资料 https://git-scm.com/book/en/v2 https://www.ruanyifeng.com/blog/2014/06/git_remote.html "},"git/remote/git_clone.html":{"url":"git/remote/git_clone.html","title":"git clone","keywords":"","body":"git clone git clone命令将存储库克隆到新目录中。 默认克隆方式 远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。 git clone 这种方式会默认克隆主分支,Git会先在当前目录下创建一个与远程仓库同名的目录,然后将远程仓库中的所有内容下载到该同名目录中. 例如: git clone git@github.com:lanlan2017/book.git 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git clone git@github.com:lanlan2017/book.git Cloning into 'book'... remote: Enumerating objects: 246, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (139/139), done. remote: Total 246 (delta 98), reused 235 (delta 87), pack-reused 0 Receiving objects: 100% (246/246), 735.76 KiB | 17.00 KiB/s, done. Resolving deltas: 100% (98/98), done. lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ ls book/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ cd book/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ ls -a ./ ../ .git/ book.json java/ myWebStyle.css README.md SUMMARY.md 克隆到指定目录 git clone 例如,克隆远程仓库到当前目录下的book2目录中: git clone git@github.com:lanlan2017/book.git book2 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git clone git@github.com:lanlan2017/book.git book2 Cloning into 'book2'... remote: Enumerating objects: 246, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (139/139), done. remote: Total 246 (delta 98), reused 235 (delta 87), pack-reused 0 Receiving objects: 100% (246/246), 735.76 KiB | 8.00 KiB/s, done. Resolving deltas: 100% (98/98), done. lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ ls -a ./ ../ book/ book2/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ cd book2 lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book2 (master) $ ls -a ./ ../ .git/ book.json java/ myWebStyle.css README.md SUMMARY.md 克隆远程仓库的指定分支 git clone -b 分支名 仓库地址 这种情况下,Git会在当前目录下创建一个与远程仓库同名的目录,然后将远程仓库中的内容下载到这个同名的目录中. 例如克隆远程仓库的gh-pages分支: git clone -b gh-pages git@github.com:lanlan2017/book.git 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git clone -b gh-pages git@github.com:lanlan2017/book.git Cloning into 'book'... remote: Enumerating objects: 246, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (139/139), done. remote: Total 246 (delta 98), reused 235 (delta 87), pack-reused 0 Receiving objects: 100% (246/246), 735.76 KiB | 7.00 KiB/s, done. Resolving deltas: 100% (98/98), done. lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ ls book/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ cd book/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (gh-pages) $ ls -a ./ .git/ gitbook/ java/ package-lock.json ../ .gitignore index.html myWebStyle.css search_plus_index.json 可以看到 克隆远程仓库的指定分支到指定目录 git clone -b 分支名 远程仓库地址 本地目录地址 例如,克隆远程仓库的gh-pages分支到当前目录下: git clone -b gh-pages git@github.com:lanlan2017/book.git . 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git clone -b gh-pages git@github.com:lanlan2017/book.git . Cloning into '.'... remote: Enumerating objects: 246, done. remote: Counting objects: 100% (246/246), done. remote: Compressing objects: 100% (139/139), done. Receremote: Total 246 (delta 98), reused 235 (delta 87), pack-reused 0 Receiving objects: 100% (246/246), 735.76 KiB | 11.00 KiB/s, done. Resolving deltas: 100% (98/98), done. lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test (gh-pages) $ ls gitbook/ index.html java/ myWebStyle.css package-lock.json search_plus_index.json 克隆远程仓库的子目录 初始化本地仓库,并进入git init book &&cd book 设置允许克隆子目录git config core.sparsecheckout true 设置要克隆的仓库的子目录路径echo 'java/*' >> .git/info/sparse-checkout 这里的java/*,就是要复制的子目录. 添加远程仓库的地址git remote add origin git@github.com:lanlan2017/book.git 拉去远程仓库git pull origin master 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git init book &&cd book Initialized empty Git repository in G:/Desktop/Test/book/.git/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git config core.sparsecheckout true lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ echo 'java*' >> .git/info/sparse-checkout lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git remote add origin git@github.com:lanlan2017/book.git lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git pull origin master remote: Enumerating objects: 16, done. remote: Counting objects: 100% (16/16), done. remote: Compressing objects: 100% (16/16), done. remote: Total 16 (delta 0), reused 16 (delta 0), pack-reused 0 Unpacking objects: 100% (16/16), done. From github.com:lanlan2017/book * branch master -> FETCH_HEAD * [new branch] master -> origin/master lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ ls -a ./ ../ .git/ java/ 克隆远程仓库的子目录的子目录 步骤和上面的一样,修改第3步的子目录的地址即可: echo 'java/algorithm/sort/*' >> .git/info/sparse-checkout 运行效果: lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test $ git init book &&cd book Initialized empty Git repository in G:/Desktop/Test/book/.git/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git config core.sparsecheckout true lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ echo 'java/algorithm/sort/*' >> .git/info/sparse-checkout lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git remote add origin git@github.com:lanlan2017/book.git lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ git pull origin master remote: Enumerating objects: 16, done. remote: Counting objects: 100% (16/16), done. remote: Compressing objects: 100% (16/16), done. remote: Total 16 (delta 0), reused 16 (delta 0), pack-reused 0 Unpacking objects: 100% (16/16), done. From github.com:lanlan2017/book * branch master -> FETCH_HEAD * [new branch] master -> origin/master lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ ls java/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book (master) $ cd java/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book/java (master) $ ls algorithm/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book/java (master) $ cd algorithm/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book/java/algorithm (master) $ ls sort/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book/java/algorithm (master) $ cd sort/ lan@DESKTOP-8ISAT6B MINGW64 /g/Desktop/Test/book/java/algorithm/sort (master) $ ls BubbleSort.md InsertSort.md QuickSort.md README.md SelectSort.md 参考资料 https://www.yiibai.com/git/git_clone.html https://juejin.im/post/6844903585533313032 "},"git/remote/git_remote.html":{"url":"git/remote/git_remote.html","title":"git remote","keywords":"","body":"git remote 为了便于管理，Git要求每个远程主机都必须指定一个主机名。git remote命令就用于管理主机名。 列出远程主机 不带选项的时候，git remote命令列出所有远程主机。 $ git remote origin 查看远程主机的网址 使用-v选项，可以参看远程主机的网址。 $ git remote -v origin git@github.com:lanlan2017/book.git (fetch) origin git@github.com:lanlan2017/book.git (push) 上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。 克隆仓库的时候指定远程主机名 克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。 $ git clone -o jQuery https://github.com/jquery/jquery.git $ git remote jQuery 上面命令表示，克隆的时候，指定远程主机叫做jQuery。 查看远程主机的信息 git remote show命令加上主机名，可以查看该主机的详细信息。 git remote show 显示效果: $ git remote show origin * remote origin Fetch URL: git@github.com:lanlan2017/book.git Push URL: git@github.com:lanlan2017/book.git HEAD branch: master Remote branches: gh-pages new (next fetch will store in remotes/origin) master tracked Local ref configured for 'git push': master pushes to master (up to date) 添加远程主机 git remote add命令用于添加远程主机。 git remote add 删除远程主机 git remote rm命令用于删除远程主机。 git remote rm 修改远程主机名 git remote rename命令用于远程主机的改名。 git remote rename "}}